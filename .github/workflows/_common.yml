# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# .github/workflows/_common.yml
name: _common
on:
  workflow_call:
    inputs:
      skip_pr_title:
        type: boolean
        required: false
        default: false
        description: "Skip PR title check (for push events)"

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: bdd-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr-title:
    name: Check PR Title
    if: github.event_name == 'pull_request' && !inputs.skip_pr_title
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
            repo
            deps

  license-headers:
    name: Check license headers
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - uses: actions/checkout@v4

      - name: Check Apache license headers
        run: |
          echo "🔍 Checking license headers..."

          # Pull the addlicense image
          docker pull ghcr.io/google/addlicense:latest

          # Run the check
          if docker run --rm -v ${{ github.workspace }}:/src -w /src \
            ghcr.io/google/addlicense:latest \
            -check -f ASF_LICENSE.txt . > missing_files.txt 2>&1; then
            echo "✅ All files have proper license headers"
          else
            file_count=$(wc -l < missing_files.txt)
            echo "❌ Found $file_count files missing license headers:"
            echo ""
            cat missing_files.txt | sed 's/^/  • /'
            echo ""
            echo "💡 Run 'addlicense -f ASF_LICENSE.txt .' to fix automatically"

            # Add to summary
            echo "## ❌ License Headers Missing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following files are missing Apache license headers:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat missing_files.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo 'Please call `just licenses-fix` to fix automatically.'

            exit 1
          fi

  license-list:
    name: Check licenses list
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - uses: actions/checkout@v4

      - run: |
          echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"

      - run: scripts/licenses-list.sh --check

  markdown:
    name: Markdown lint
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: |
          echo "🔍 Checking markdown files..."

          # Create config if it doesn't exist
          if [ ! -f ".markdownlint.yml" ]; then
            cat > .markdownlint.yml << 'EOF'
          # Markdown lint configuration
          default: true
          MD013:
            line_length: 120
            tables: false
          MD033:
            allowed_elements: [details, summary, img]
          MD041: false  # First line in file should be a top level heading
          EOF
          fi

          # Run the linter
          if markdownlint '**/*.md' --ignore-path .gitignore; then
            echo "✅ All markdown files are properly formatted"
          else
            echo "❌ Markdown linting failed"
            echo "💡 Run 'markdownlint **/*.md --fix' to auto-fix issues"
            exit 1
          fi

  commit-lint:
    name: Lint commit messages
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "🔍 Checking commit messages..."

          # Get commits in PR
          COMMITS=$(git log --format=%s origin/${{ github.base_ref }}..HEAD)

          # Define conventional commit pattern
          PATTERN='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+'

          FAILED=false
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE "$PATTERN"; then
              echo "❌ Invalid commit message: $commit"
              FAILED=true
            fi
          done <<< "$COMMITS"

          if [ "$FAILED" = true ]; then
            echo ""
            echo "💡 Commit messages must follow conventional commits format:"
            echo "   <type>(<scope>): <description>"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            exit 1
          else
            echo "✅ All commit messages follow conventional commits format"
          fi

  summary:
    name: Common checks summary
    needs: [license-headers, license-list, markdown]
    if: always()
    runs-on: ubuntu-latest
    env:
      IGGY_CI_BUILD: true
    steps:
      - name: Summary
        run: |
          echo "## Common Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Add PR title check if it ran
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "| PR Title | ${{ needs.pr-title.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Commit Messages | ${{ needs.commit-lint.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| License Headers | ${{ needs.license-headers.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License List | ${{ needs.license-list.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown | ${{ needs.markdown.result }} |" >> $GITHUB_STEP_SUMMARY
