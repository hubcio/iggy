# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: python-maturin
description: Build/test/publish Python package with maturin
inputs:
  task:
    description: "Task to run"
    required: true
  version:
    description: "Version for publishing"
    required: false
    default: ""
  dry_run:
    description: "Dry run mode"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      run: |
        set -euo pipefail

        # Validate task
        case "${{ inputs.task }}" in
          lint|test|build|publish)
            echo "✓ Valid task: ${{ inputs.task }}"
            ;;
          *)
            echo "❌ Invalid task: ${{ inputs.task }}"
            exit 1
            ;;
        esac

        # Validate version format if publishing
        if [[ "${{ inputs.task }}" == "publish" && -n "${{ inputs.version }}" ]]; then
          if ! echo "${{ inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "❌ Invalid version format: ${{ inputs.version }}"
            exit 1
          fi
        fi
      shell: bash

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Setup Rust with cache
      uses: ./.github/actions/setup-rust-with-cache
      with:
        cache-targets: false  # Only cache registry and git deps, not target dir (sccache handles that)

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('foreign/python/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools

        # Install maturin for building
        pip install 'maturin>=1.2,<2.0'

        # Install testing dependencies from pyproject.toml
        cd foreign/python
        pip install -e ".[testing,examples,dev]"
        cd ../..

        # Install additional CI dependencies for Docker testing if needed
        if [ "${{ inputs.task }}" = "test" ]; then
          pip install 'testcontainers[docker]>=3.7.0,<5.0' || true
        fi
      shell: bash

    - name: Lint and format check
      if: inputs.task == 'lint'
      run: |
        # Build list of directories to check using absolute paths
        DIRS_TO_CHECK="${GITHUB_WORKSPACE}/foreign/python/src"
        DIRS_TO_CHECK="$DIRS_TO_CHECK ${GITHUB_WORKSPACE}/foreign/python/tests"
        DIRS_TO_CHECK="$DIRS_TO_CHECK ${GITHUB_WORKSPACE}/foreign/python/python_examples"
        DIRS_TO_CHECK="$DIRS_TO_CHECK ${GITHUB_WORKSPACE}/examples/python/getting-started"

        echo "Directories to check: $DIRS_TO_CHECK"

        echo "Running ruff check..."
        ruff check $DIRS_TO_CHECK

        echo "Running black check..."
        black --check $DIRS_TO_CHECK

        echo "Running isort check..."
        isort --check-only $DIRS_TO_CHECK

        echo "Running mypy check..."
        mypy ${GITHUB_WORKSPACE}/foreign/python/src/
      shell: bash

    - name: Build Python wheel for testing
      if: inputs.task == 'test'
      run: |
        cd foreign/python

        # Build the module for testing
        echo "Building Python wheel..."
        maturin build -o dist

        # Install the built wheel
        echo "Installing built wheel..."
        pip install dist/*.whl --force-reinstall

        # Create symlink for examples directory if needed
        if [ -d "python_examples" ] && [ ! -e "examples" ]; then
          ln -s python_examples examples
        fi
      shell: bash

    - name: Start Iggy server
      if: inputs.task == 'test'
      id: iggy
      uses: ./.github/actions/server-start
      with:
        mode: cargo
        cargo-bin: iggy-server
        host: 127.0.0.1
        port: 8090
        wait-timeout-seconds: 45
      continue-on-error: true

    - name: Run Python integration tests
      if: inputs.task == 'test' && steps.iggy.outcome == 'success'
      run: |
        cd foreign/python

        echo "Running integration tests with Iggy server at ${{ steps.iggy.outputs.address }}..."

        # Run all tests with server connection
        IGGY_SERVER_HOST=127.0.0.1 \
        IGGY_SERVER_TCP_PORT=8090 \
          pytest tests/ -v \
            --junitxml=../../reports/python-junit.xml \
            --tb=short \
            --capture=no || TEST_EXIT_CODE=$?

        # Exit with test result
        exit ${TEST_EXIT_CODE:-0}
      shell: bash

    - name: Run Python unit tests only (fallback)
      if: inputs.task == 'test' && steps.iggy.outcome != 'success'
      run: |
        cd foreign/python

        echo "⚠️ Server failed to start, running unit tests only..."

        # Run unit tests only (exclude integration tests)
        pytest tests/ -v \
          -m "not integration" \
          --junitxml=../../reports/python-junit.xml \
          --tb=short || TEST_EXIT_CODE=$?

        # Exit with test result (allow some failures in unit-only mode)
        exit ${TEST_EXIT_CODE:-0}
      shell: bash

    - name: Stop Iggy server
      if: always() && inputs.task == 'test'
      uses: ./.github/actions/server-stop
      with:
        pid-file: ${{ steps.iggy.outputs.pid_file }}
        log-file: ${{ steps.iggy.outputs.log_file }}

    - name: Upload test artifacts
      if: always() && inputs.task == 'test'
      uses: actions/upload-artifact@v4
      with:
        name: python-test-results
        path: |
          reports/python-junit.xml
          ${{ steps.iggy.outputs.log_file }}
        retention-days: 7
        if-no-files-found: ignore

    - name: Build wheels
      if: inputs.task == 'build' || inputs.task == 'publish'
      run: |
        cd foreign/python

        # Build wheels for multiple Python versions
        # Note: Only build for versions available in the runner
        PYTHON_VERSIONS=""
        for py_ver in python3.8 python3.9 python3.10 python3.11 python3.12; do
          if command -v $py_ver &> /dev/null; then
            PYTHON_VERSIONS="$PYTHON_VERSIONS $py_ver"
          fi
        done

        if [ -z "$PYTHON_VERSIONS" ]; then
          echo "Building for default Python version"
          maturin build -o dist
        else
          echo "Building for Python versions:$PYTHON_VERSIONS"
          maturin build --interpreter $PYTHON_VERSIONS -o dist
        fi

        # Build source distribution
        maturin sdist -o dist

        # List built artifacts
        ls -la dist/
      shell: bash

    - name: Publish to PyPI (trusted publisher)
      if: matrix.target.type == 'python' && env.DRY_RUN != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: foreign/python/dist