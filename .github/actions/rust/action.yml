# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: rust
description: Setup Rust and run tasks
inputs:
  task:
    description: "Task to run"
    required: true
  component:
    description: "Component name"
    required: false
    default: ""
  package:
    description: "Package name for publishing"
    required: false
    default: ""
  version:
    description: "Version for publishing"
    required: false
    default: ""
  dry_run:
    description: "Dry run mode"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup Rust toolchain
      shell: bash
      run: |
        echo "Using toolchain from rust-toolchain.toml: $(rustup show)"

    - name: Cache cargo
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ inputs.component }}-${{ inputs.task }}

    - name: Install tools for specific tasks
      shell: bash
      run: |
        case "${{ inputs.task }}" in
          sort)
            cargo install cargo-sort --locked || true
            ;;
          machete)
            cargo install cargo-machete --locked || true
            ;;
        esac

    # Individual lint tasks for parallel execution
    - name: Cargo check
      if: inputs.task == 'check'
      shell: bash
      run: |
        # Also check Rust version sync
        TOOLCHAIN_VERSION=$(grep 'channel' rust-toolchain.toml | sed 's/.*"\(.*\)".*/\1/')
        echo "Rust toolchain version: $TOOLCHAIN_VERSION"

        # Run cargo check
        cargo check --all --all-features

    - name: Cargo fmt
      if: inputs.task == 'fmt'
      shell: bash
      run: cargo fmt --all -- --check

    - name: Cargo clippy
      if: inputs.task == 'clippy'
      shell: bash
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Cargo sort
      if: inputs.task == 'sort'
      shell: bash
      run: cargo sort --check --workspace

    - name: Cargo machete
      if: inputs.task == 'machete'
      shell: bash
      run: cargo machete --with-metadata

    - name: Doc test
      if: inputs.task == 'doctest'
      shell: bash
      run: |
        cargo test --doc
        cargo doc --no-deps --all-features --quiet

    - name: Build and test
      if: inputs.task == 'test'
      shell: bash
      run: |
        cargo build
        cargo test --no-fail-fast

    - name: Test README examples
      if: inputs.task == 'readme-examples'
      shell: bash
      run: |
        # Install dependencies for keyring tests
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update --yes && sudo apt-get install --yes gnome-keyring keyutils
          rm -f $HOME/.local/share/keyrings/*
          echo -n "test" | gnome-keyring-daemon --unlock || true
        fi
        
        # Run README examples validation script
        if [ -f "./scripts/run-rust-examples-from-readme.sh" ]; then
          ./scripts/run-rust-examples-from-readme.sh
        else
          echo "README examples script not found at ./scripts/run-rust-examples-from-readme.sh"
          exit 1
        fi
        
        # Check if workspace is clean after running examples
        git status --porcelain

    - name: Backwards compatibility check
      if: inputs.task == 'compat'
      shell: bash
      run: |
        # Check backwards compatibility
        if [ -f "./scripts/backwards-compat.sh" ]; then
          ./scripts/backwards-compat.sh
        else
          echo "No compatibility check script found"
        fi

    - name: Build for Docker
      if: inputs.task == 'docker'
      shell: bash
      run: |
        # Build release binaries for Docker
        case "${{ inputs.component }}" in
          server)
            cargo build --release --bin iggy-server
            cargo build --release --bin iggy --no-default-features
            ;;
          connectors-runtime)
            cargo build --release --package connectors-runtime
            ;;
          mcp)
            cargo build --release --package mcp
            ;;
          bench-dashboard)
            cargo build --release --bin iggy-bench-dashboard-server
            ;;
          *)
            echo "Unknown component: ${{ inputs.component }}"
            exit 1
            ;;
        esac

    - name: Publish crate
      if: inputs.task == 'publish'
      shell: bash
      env:
        CARGO_REGISTRY_TOKEN: ${{ env.CARGO_REGISTRY_TOKEN }}
      run: |
        if [ -z "${{ inputs.package }}" ]; then
          echo "‚ùå No package specified for publishing"
          exit 1
        fi

        if [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "üîç Dry run - would publish crate: ${{ inputs.package }}"
          cargo publish --dry-run -p ${{ inputs.package }} || true
        else
          echo "üì¶ Publishing crate: ${{ inputs.package }}"

          # For server, we might need to publish dependencies first
          if [ "${{ inputs.package }}" = "server" ]; then
            # Check if iggy needs to be published first
            cargo publish -p iggy --allow-dirty || echo "iggy already published"
            sleep 30
          fi

          cargo publish -p ${{ inputs.package }}
        fi