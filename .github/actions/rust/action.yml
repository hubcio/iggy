# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: rust
description: Setup Rust and run tasks
inputs:
  task:
    description: "Task to run"
    required: true
  component:
    description: "Component name"
    required: false
    default: ""
  package:
    description: "Package name for publishing"
    required: false
    default: ""
  version:
    description: "Version for publishing"
    required: false
    default: ""
  dry_run:
    description: "Dry run mode"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup Rust with cache
      uses: ./.github/actions/setup-rust-with-cache
      with:
        cache-targets: false  # Only cache registry and git deps, not target dir (sccache handles that)
        show-stats: true

    - name: Install tools for specific tasks
      run: |
        case "${{ inputs.task }}" in
          sort)
            cargo install cargo-sort --locked || true
            ;;
          machete)
            cargo install cargo-machete --locked || true
            ;;
        esac
      shell: bash

    # Individual lint tasks for parallel execution
    - name: Cargo check
      if: inputs.task == 'check'
      run: |
        # Also check Rust version sync
        TOOLCHAIN_VERSION=$(grep 'channel' rust-toolchain.toml | sed 's/.*"\(.*\)".*/\1/')
        echo "Rust toolchain version: $TOOLCHAIN_VERSION"

        # Run cargo check
        cargo check --all --all-features
      shell: bash

    - name: Cargo fmt
      if: inputs.task == 'fmt'
      run: cargo fmt --all -- --check
      shell: bash

    - name: Cargo clippy
      if: inputs.task == 'clippy'
      run: cargo clippy --all-targets --all-features -- -D warnings
      shell: bash

    - name: Cargo sort
      if: inputs.task == 'sort'
      run: cargo sort --check --workspace
      shell: bash

    - name: Cargo machete
      if: inputs.task == 'machete'
      run: cargo machete --with-metadata
      shell: bash

    - name: Doc test
      if: inputs.task == 'doctest'
      run: |
        cargo test --doc
        cargo doc --no-deps --all-features --quiet
      shell: bash

    - name: Install dependencies for Rust tests
      if: inputs.task == 'test' && runner.os == 'Linux'
      run: |
        sudo apt-get update --yes && sudo apt-get install --yes musl-tools gnome-keyring keyutils
        rm -f $HOME/.local/share/keyrings/*
        echo -n "test" | gnome-keyring-daemon --unlock
      shell: bash

    - name: Build and test
      if: inputs.task == 'test'
      run: |
        cargo build
        cargo test --no-fail-fast
      shell: bash

    - name: Backwards compatibility check
      if: inputs.task == 'compat'
      run: |
        scripts/check-backwards-compat.sh \
          --master-ref master \
          --pr-ref ${{ github.sha }} \
          --port 8090 --wait-secs 180
      shell: bash

    - name: Build for Docker
      if: inputs.task == 'docker'
      run: |
        # Build release binaries for Docker
        case "${{ inputs.component }}" in
          server)
            cargo build --release --bin iggy-server
            cargo build --release --bin iggy --no-default-features
            ;;
          connectors-runtime)
            cargo build --release --bin connectors
            ;;
          mcp)
            cargo build --release --bin iggy-mcp
            ;;
          bench-dashboard)
            cargo build --release --bin iggy-bench-dashboard-server
            ;;
          *)
            echo "Unknown component: ${{ inputs.component }}"
            exit 1
            ;;
        esac
      shell: bash

    - name: Publish crate
      if: inputs.task == 'publish'
      env:
        CARGO_REGISTRY_TOKEN: ${{ env.CARGO_REGISTRY_TOKEN }}
      run: |
        if [ -z "${{ inputs.package }}" ]; then
          echo "‚ùå No package specified for publishing"
          exit 1
        fi

        if [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "üîç Dry run - would publish crate: ${{ inputs.package }}"
          cargo publish --dry-run -p ${{ inputs.package }} || true
        else
          echo "üì¶ Publishing crate: ${{ inputs.package }}"

          # For server, we might need to publish dependencies first
          if [ "${{ inputs.package }}" = "server" ]; then
            # Check if iggy needs to be published first
            cargo publish -p iggy --allow-dirty || echo "iggy already published"
            sleep 30
          fi

          cargo publish -p ${{ inputs.package }}
        fi
      shell: bash